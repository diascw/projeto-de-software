Um conjunto de conceitos fundamentais de projeto de Software evolui ao longo da história.
- Estes conceitos fornecem ao projetista de software uma base a partir da qual métdos de projeto mais sotisficados podem ser aplicados.


CONCEITOS DE PROJETO 
- ABSTRAÇÃO
 * a abstração é o processo de simplificar e reduzir a complexidade, focando nos aspectos essenciais de um problema, ignorando detalhes desnecessários. No projeto de software, isso permite que desenvolvedores se concentrem nas funcionalidades essenciais e nas interações entre componentes, sem se perder em implementações detalhadas.
 * ABSTRAÇÃO PROCEDURAL - implementado com um "conhecimento" do objeto que está associado com "abrir"
 * ABSTRAÇÃO DE DADOS - no exemplo de uma "porta", seria a busca pelo fornecedor, número do modelo, tipo, largura, peso, mecanismo para abrir

- ARQUITETURA
* Refere-se à estrutura global do sistema, incluindo os componentes principais e suas interações. A arquitetura define o esqueleto do sistema e influencia decisões de design, desempenho, escalabilidade e manutenção.


- Padrões 
* é parte de um conhecimento consolidado já existente que transmite a essência de uma solução comprovada para um problema recorrente em certo contexto.
* a descrição de um padrão permite ao projetista determinar se o padrão se aplica ou não ao trabalho em questão e se ele pode ser ou não utilizado


- Separação de interesses
* Esse conceito envolve dividir um sistema em partes distintas, onde cada parte aborda uma preocupação específica. A separação de interesses facilita a manutenção e evolução do software, permitindo que diferentes aspectos do sistema sejam modificados independentemente.

- Modularidade
* é a manifestação mais comum da separação de interesses
* característica dos sistemas que são divididos em componentes
* modularização permite que um sistema complexo seja compreendido a mente humano que não cnsegue lidar com toda a complexidade dos sistemas de uma só vez
* abstração permite que nos concentremos no problema em algum nível de generalização sem considerar detalhes


- Ocultação de informação
*  A ocultação de informação é o princípio de esconder detalhes de implementação dentro de um módulo, expondo apenas o que é necessário para o uso do módulo. Isso reduz a complexidade e minimiza o impacto de mudanças em outras partes do sistema. 

- Independência Funcional
* Refere-se à capacidade de um módulo ou componente funcionar de maneira independente dos outros. Módulos com alta independência funcional são menos propensos a serem afetados por mudanças em outras partes do sistema.

- Refinamento:
* Processo de elaboração de um sistema, começando em alto nível e gradualmente adicionando mais detalhes.
* Um programa é desenvolvido através de refinamentos sucessivos, onde se parte de uma descrição em linguagem natural e se refina até chegar à linguagem de programação.
Abstração (simplificação) e refinamento são conceitos complementares.


- Refatoração:
* Refatoração é o processo de reorganizar o código de software para melhorar sua estrutura interna sem alterar seu comportamento externo.
* O objetivo é melhorar o design, eliminando redundâncias, removendo elementos não utilizados, substituindo algoritmos ineficientes, e corrigindo estruturas de dados inadequadas.

- Divisão de Responsabilidades:
* Objetivo: Organizar o aplicativo em partes distintas.
* Como Fazer: Separe a funcionalidade em módulos ou componentes que realizem tarefas específicas e evitem sobreposições. Isso facilita a manutenção e a escalabilidade do software.

- Princípio da Responsabilidade Única:
* Objetivo: Garantir que cada módulo ou componente tenha uma única responsabilidade.
* Como Fazer: Cada componente deve focar em uma única tarefa ou recurso, ou em um conjunto coeso de funcionalidades relacionadas. Isso melhora a coesão e reduz o acoplamento.

- Princípio do Conhecimento Mínimo (Lei de Demeter):
* Objetivo: Minimizar a dependência entre componentes.
* Como Fazer: Um componente deve interagir com outros componentes apenas através de interfaces bem definidas e não deve conhecer os detalhes internos de outros componentes. Isso promove a modularidade e a manutenção mais fácil.

- Não se Repita (DRY - Don’t Repeat Yourself):
* Objetivo: Evitar a duplicação de código e lógica.
* Como Fazer: Centralize a funcionalidade em um único lugar. Se um código ou lógica precisa ser reutilizada, extraia-a para um módulo ou função comum. Isso reduz erros e facilita a manutenção.

- Minimize o Design Inicial:
* Objetivo: Reduzir a complexidade inicial do projeto.
* Como Fazer: Projete apenas o que é estritamente necessário para atender às necessidades atuais. Evite sobrecarregar o projeto com funcionalidades futuras que podem nunca ser usadas. Isso ajuda a manter o design flexível e adaptável.

Esses princípios visam melhorar a qualidade, a manutenibilidade e a escalabilidade dos projetos de software. Implementá-los ajuda a criar sistemas mais robustos e fáceis de gerenciar.

- Boas práticas em projeto 

- Mantenha padrões de projeto consistentes dentro de uma mesma camada 
* Mantenha o design de componentes consistente para uma determinada operação dentro de uma camada lógica 
* Avaliar quando a complexidade e variação dos requisitos é muito alta

- Não duplique funcionalidades
* Aumenta a coesão
* Facilidade a otimização e manutenção

- Estabeleça um estilo de codificação e uma convenção de nomenclatura 
* Facilita o entendimento
* Otimiza a manutenção

- Considere abordagens alternativas
* Padrões 
* Estilo de arquitetura
* Tecnologias

- Ser rastreável ao modelo de análise
* Consistência entre modelos e os artefatos
* Facilita o entendimento

- Minimize a distância entre o software e o problema do mundo real
* Software inovador
* Diferença para o negócio 

- Organize-se para a gestão da qualidade
* Estrture para acomodar mudanças
* Use técnicas e ferramentas automatizadas de controle de qualidade
* Use testes unitários, análise de dependência, de código estático..
* Defina métricas comportamentais e de desempenho para componentes e subsistemas

- Considere os aspectos  operacionais da aplicação
* Determine métricas operacionais
* Estabeleça níveis de dependências (Priorização de artefatos bem definidos)

BOM PROJETO É INVESTIMENTO
Embora em alguns momentos iniciais possa parecer viável sacrificar a qualidade do design em favor de um menor "time to market", a longo prazo, investir em um bom design é mais vantajoso, pois maximiza a funcionalidade e o retorno do projeto 